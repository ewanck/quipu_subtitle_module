<?php

//Defines block for Subtitle module;

function subtitle_block_info() {
  $blocks['subtitle'] = array(
    'info' => t('Subtitle'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

//Defines block content

function subtitle_block_view() {
  $block['subject'] = t('Subtitle Sync');
  if (user_access('access content')) {
    $items = count_pending();
//    $block['content'] = theme('item_list', array('items' => $urls));
    $block['content'] = vsprintf('<table id="subtitle-info"><tr><td>To be sent to Amara:</td><td>Pending ES</td><td>Pending EN</td></tr><tr><td>%s</td><td>%s</td><td>%s</td></tr><tr><td><a>View List -></a></td><td><a>View List -></a></td><td><a>View List -></a></td></tr><td><form  method="post" action="http://phoneline.quipu-project.com/amarasync/push/null/all"><input value="Push" type="submit"></form><br /></td><td><form  method="post" action="http://sandbox.chakafilms.com/sandbox/projectquipu/amarapull"><input value="Pull EN" type="submit"></form></td><td><form  method="post" action="http://sandbox.chakafilms.com/sandbox/projectquipu/amarapull"><input value="Pull ES" type="submit"></form></td></tr></table><br /><form  method="post" action="http://sandbox.chakafilms.com/sandbox/projectquipu/amarasync/pull/es/all"><input value="Sync All" type="submit"></form>', $items);
  };
  return $block;
};

function subtitle_menu() {
  $item['amarasync/%/%/%'] = array(
          'type' => MENU_CALLBACK,
          'page callback' => 'subtitle_amara_sync',
	  'page arguments' => array(1, 2, 3),
	  'access arguments' => array('access content'),
	  'delivery callback' => 'drupal_json_output',
  );

  return $item;
}

function subtitle_amara_sync($mode, $lang, $testimony) {
//  $result = update_existing_videos();
//  dpm($result); 
//  pull_subs('en');
//  pull_subs('en');
//  $result = pull_subs('en');
  switch ($mode) {
    case "push":
      if ($testimony == 'all') { 
        $result = push_subs();
	return $result;
      } else {
        $result = update_single_url($testimony);
//	if ($result == 'error') {
//	  return 'This testimony is waiting to be edited and cannot be sent at this time.';
//	} else {
//	  return 'Success! This testimony link has been updated in Amara.';
	return $result;
//	};
      };
      break;
    case "pull":
      $result = pull_subs($testimony, $lang);
      return $result;
      break;
    case "remove":
      $result = remove_from_amara($testimony);
      return $result;
      break;
  };
};

function count_pending() {
  $unsent = load_audio_to_send();
  $pending_es = load_pending('es');
  $pending_en = load_pending('en');
  $stats = array();
  $stats['unsent'] = count($unsent);
  $stats['pending_es'] = count($pending_es);
  $stats['pending_en'] = count($pending_en);
  return $stats;
}

function remove_from_amara($nid) {
//  $post_data = array(
//    'url' => $link,
//    'primary' => TRUE,
//  );
  $node = node_load($nid);
  $sid = $node->field_subtitles_id['und'][0]['value'];
  $vid_url = 'https://www.amara.org/api2/partners/videos/'.$sid;
  $ch = curl_init($vid_url);
  curl_setopt_array($ch, array(
  	CURLOPT_CUSTOMREQUEST => "DELETE",
	CURLOPT_RETURNTRANSFER => TRUE,
	CURLOPT_HTTPHEADER => array(
	  'Accept: application/json', 
	  'X-api-username: ewanck', 
	  'X-apikey: 786e5cc325bb3d7b3779c8c572c6a4a1126a87f1',
	  'Content-Type: application/json',
	),
//	CURLOPT_POSTFIELDS => json_encode($post_data)
  ));
  $response = curl_exec($ch);
  if($response === FALSE){
    die(curl_error($ch));	
  };
  return $response;
}

function update_single_url($testimony) {
  $node = node_load($testimony);
  if($node->field_to_edit['und'][0]['value'] == 1) {
    if(array_key_exists('und', $node->field_basic_edit)) {
      $link = "http://phoneline.quipu-project.com/sites/default/files/" . $node->field_basic_edit['und'][0]['filename'];
    } else {
      return 'ERROR: This video is still waiting to be edited';
    };
  } else {
    $link = "http://phoneline.quipu-project.com/sites/default/files/" . $node->field_audio_file['und'][0]['filename'];
  };
  $post_data = array(
    'url' => $link,
    'primary' => TRUE,
  );
  if (array_key_exists('und', $node->field_subtitles_id)) {
    $vid_url = 'https://www.amara.org/api2/partners/videos/'.$node->field_subtitles_id['und'][0]['value'].'/urls/';
  } else {
    return 'ERROR: This video has not yet been sent to Amara.';
  };
  $ch = curl_init($vid_url);
  curl_setopt_array($ch, array(
  	CURLOPT_CUSTOMREQUEST => "POST",
	CURLOPT_RETURNTRANSFER => TRUE,
	CURLOPT_HTTPHEADER => array(
	  'Accept: application/json', 
	  'X-api-username: ewanck', 
	  'X-apikey: 786e5cc325bb3d7b3779c8c572c6a4a1126a87f1',
	  'Content-Type: application/json',
	),
	CURLOPT_POSTFIELDS => json_encode($post_data)
  ));
  $response = curl_exec($ch);
  if($response === FALSE){
    die(curl_error($ch));	
  };
  return "Success! This testimony's URL has now been updated in Amara.";
};

function migrate_urls() {
  $list = "";
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'audio_story')
    ->propertyOrderBy('created', 'DESC');
  $results = $query->execute();
  if (isset($results['node'])) {
    $nodes = node_load_multiple(array_keys($results['node']));

    foreach ($nodes as $node) {
      $audio_link = field_get_items('node', $node, 'field_audio_link');
      $fragment = substr($audio_link[0]['value'], 0, 29);
      if($fragment == "http://www.quipu-project.com/") {
//        $fid = field_get_items('node', $node, 'field_recording_fid');
//	$file = file_load($fid[0]['value']);
//        $path = $file->uri;
//	if ($prefix == "http://www.quipu-project/sites") {
          $end_path = substr($audio_link[0]['value'], 29); 
	  $new_url = "http://phoneline.quipu-project.com/".$end_path;
//	if ($path != NULL) {
          $node->field_audio_link[LANGUAGE_NONE][0]['value'] = $new_url;
          node_save($node);
      	  $list = $list.$new_url."  //  ";
//	}
      }
    }
  }
  return $list;
}

function update_existing_videos() {
  $i = 0;
  $headers = array('Accept' => ' application/json', 'X-api-username' => 'ewanck', 'X-apikey' => '786e5cc325bb3d7b3779c8c572c6a4a1126a87f1', 'Content-Type' => 'application/json');
  $options = array("headers" => $headers);
  $url = 'https://www.amara.org/api2/partners/videos/?team=quipuproject';
  $response = drupal_http_request($url, $options);
  $data = json_decode($response->data, TRUE);

  foreach ($data['objects'] as $obj) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->fieldCondition('field_audio_link', 'value', $obj['all_urls'][0], '=')
      ->propertyCondition('type', 'audio_story')
       ->propertyOrderBy('created', 'DESC');
    $results = $query->execute();
    if (isset($results['node'])) {
      $nodes = node_load_multiple(array_keys($results['node']));

      foreach ($nodes as $node) {
        $audio_link = field_get_items('node', $node, 'field_audio_link');
        $length = field_get_items('node', $node, 'field_length');
	$language = field_get_items('node', $node, 'field_audio_language');
//        node_load($node->nid);
	$node->field_subtitles_sent['und'][0]['value'] = '1';
	$node->field_subtitles_id['und'][0]['value'] = $obj['id'];
	node_save($node);

	$post_data = array(
	   'video_url' => $obj['all_urls'][0],
	   'title' => $node->title,
	   'duration' => $length[0]['value'],
	   'primary_audio_language_code' => $language[0]['value'],
  	);
	$vid_url = 'https://www.amara.org/api2/partners/videos/'.$obj['id'].'/';
        $ch = curl_init($vid_url);
  	curl_setopt_array($ch, array(
  			 CURLOPT_CUSTOMREQUEST => "PUT",
			 CURLOPT_RETURNTRANSFER => TRUE,
			 CURLOPT_HTTPHEADER => array(
			     		    'Accept: application/json', 
					    'X-api-username: ewanck', 
					    'X-apikey: 786e5cc325bb3d7b3779c8c572c6a4a1126a87f1',
					    'Content-Type: application/json',
			 ),
			 CURLOPT_POSTFIELDS => json_encode($post_data)
  	));
  	$response = curl_exec($ch);
  	if($response === FALSE){
    	  die(curl_error($ch));	
  	};
	$i = $i + 1;
      };
    };
  };
  return $i;
};

function push_subs() {
  $i = 0;
  $results = load_audio_to_send();
  foreach ($results as $result) {
    $i = $i + 1;
    $index = send_new_audios($result);
    $node = node_load($result['nid']);
    $node->field_subtitles_id['und'][0]['value'] = $index;
    $node->field_subtitles_sent['und'][0]['value'] = '1';
    node_save($node);
  };
  return $i;
};

function format_time($milliseconds) {
  $msec_hh = 1000 * 60 * 60;
  $msec_mm = 1000 * 60;
  $msec_ss = 1000;

  return sprintf("%02s:%02s:%02s,%03s", (int)($milliseconds / $msec_hh), (int)(($milliseconds % $msec_hh) / $msec_mm), (int)((($milliseconds % $msec_hh) % $msec_mm) / $msec_ss), (int)((($milliseconds % $msec_hh) % $msec_mm) % $msec_ss) );
};

function json_to_csv($data) {
  $i = 1;
  $srt = "";
  foreach ($data as $subtitle) {
    $in = format_time($subtitle['start']);
    $out = format_time($subtitle['end']);
    $sub = $subtitle['text'];
    $srt .= sprintf("%s\n%s --> %s\n%s\n\n",(string)$i, $in, $out, $sub);
    $i = $i + 1;
  };
  return $srt;
};

function pull_subs($testimony, $lang) {
  $updated = 0;
  if ($testimony == 'all') {
    $results = load_pending($lang);
    foreach ($results as $result) {
      $response = retrieve_subtitles($result['subtitle_id'], $lang);
      $data = json_decode($response->data, TRUE);
      $subtitles = $data['subtitles'];
      if($subtitles!="") {
        $srt = json_to_csv($subtitles);
//      $node = node_load($result['nid']);
        save_subs($result['nid'], $srt, $lang);
      	$updated = $updated + 1;
      };
    };
  } else {
    $node = node_load($testimony);
    $sid = $node->field_subtitles_id['und'][0]['value'];
    $response = retrieve_subtitles($sid, $lang);
    $data = json_decode($response->data, TRUE);
    $subtitles = $data['subtitles'];
    if ($subtitles !='') {
      $srt = json_to_csv($subtitles);
      save_subs($testimony, $srt, $lang);
      $updated = 1;
    };
  };  
/*      $node = node_load($result['nid']);
      if($lang == 'es') {    
      	foreach ($subtitles as $subtitle) {
          $node->field_in['und'][$i]['value'] = $subtitle['start']/1000;
          $node->field_out['und'][$i]['value'] = $subtitle['end']/1000;
          $node->field_subtitle['und'][$i]['value'] = $subtitle['text'];
          $i = $i + 1;
        };
        $node->field_subtitles_es_complete['und'][0]['value'] = '1';
      } else {
        foreach ($subtitles as $subtitle) {
          $node->field_in_en['und'][$i]['value'] = $subtitle['start']/1000;
          $node->field_out_en['und'][$i]['value'] = $subtitle['end']/1000;
          $node->field_subtitle_en['und'][$i]['value'] = $subtitle['text'];
          $i = $i + 1;
        };
        $node->field_subtitles_en_complete['und'][0]['value'] = '1';      
      };   
      node_save($node);
      $updated = $updated + 1;
    };
  };*/

  return $updated;
}

function save_subs($nid, $srt, $lang) {
  $node = node_load($nid);
  $splitstr = explode('/', $node->field_audio_link['und'][0]['value']);
  $splitstr2 = explode('.', $splitstr[6]);
  $name = $splitstr2[0] . '.srt';
  if($lang == 'es') {
    $file = file_save_data($srt, 'public://srt/es/' . $name);
    $node->field_srt_es[LANGUAGE_NONE][0] = array(
      'fid' => $file->fid,
      'filename' => $file->filename,
      'filemime' => $file->filemime,
      'uid' => 1,
      'uri' => $file->uri,
      'status' => 1,
      'display' => 1
    );
    $node->field_subtitles_es_complete['und'][0]['value'] = '1';
  } else {
    $file = file_save_data($srt, 'public://srt/en/' . $name);
    $node->field_srt_en[LANGUAGE_NONE][0]= array(
      'fid' => $file->fid,
      'filename' => $file->filename,
      'filemime' => $file->filemime,
      'uid' => 1,
      'uri' => $file->uri,
      'status' => 1,
      'display' => 1
    );
    $node->field_subtitles_en_complete['und'][0]['value'] = '1';
  };
  node_save($node);
};

function retrieve_subtitles($pending, $lang) {
    $headers = array('Accept' => ' application/json', 'X-api-username' => 'ewanck', 'X-apikey' => '786e5cc325bb3d7b3779c8c572c6a4a1126a87f1', 'Content-Type' => 'application/json');
    $options = array("headers" => $headers);
    $url = 'https://www.amara.org/api2/partners/videos/'.$pending.'/languages/'.$lang.'/subtitles/';
    $response = drupal_http_request($url, $options);
//    $data = json_decode($response->data, TRUE);
//    return $data['subtitles'];
    return $response;
};

function send_new_audios($data) {
//    $headers = array('Accept' => 'application/json', 'X-api-username'=> 'ewanck', 'X-apikey' =>'786e5cc325bb3d7b3779c8c572c6a4a1126a87f1', 'Content-Type' => 'application/json');
//    $options = array("headers" => $headers, "method" => "POST", "data" => "{'video_url':'".$link."', 'primary_audio_language_code':'es', 'duration':12, 'title':'test'}");
//    $result = drupal_http_request('https://www.amara.org/api2/partners/videos/?format=json', $options);

  $link = $data['audio_link'];
  $length = $data['length'];
  $title = $data['title'];
  $language = $data['language'];
  switch ($language) {
    case "es":
      $post_data = array(
  	         'video_url' => $link,
	     	 'title' => $title,
	     	 'duration' => $length,
	     	 'primary_audio_language_code' => $language,
	     	 'team' => 'quipuproject',
      );
      break;
    case "que":
      $post_data = array(
                 'video_url' => $link,
             	 'title' => $title,
             	 'duration' => $length,
             	 'primary_audio_language_code' => $language,
             	 'team' => 'quipuproject',
	     	 'project' => 'quechua',
      );
      break;
  };
  $ch = curl_init('http://www.amara.org/api2/partners/videos/');
  curl_setopt_array($ch, array(
  			 CURLOPT_POST => TRUE,
			 CURLOPT_RETURNTRANSFER => TRUE,
			 CURLOPT_HTTPHEADER => array(
			     		    'Accept: application/json', 
					    'X-api-username: ewanck', 
					    'X-apikey: 786e5cc325bb3d7b3779c8c572c6a4a1126a87f1',
					    'Content-Type: application/json',
			 ),
			 CURLOPT_POSTFIELDS => json_encode($post_data)
  ));
  $response = curl_exec($ch);
  if($response === FALSE){
    die(curl_error($ch));	
  };

  $result = json_decode($response, TRUE);

  return $result['id'];
}

function load_audio_to_send() {
  $callback = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')

//    ->fieldCondition('field_moderated', 'value', 1, '=')
    ->fieldCondition('field_subtitles_sent', 'value', 0, '=')
    ->propertyCondition('status', 1)
    ->propertyCondition('type', 'audio_story')
    ->propertyOrderBy('created', 'DESC');
  $results = $query->execute();
  if (isset($results['node'])) {
    $nodes = node_load_multiple(array_keys($results['node']));
    foreach ($nodes as $node) {
      if($node->field_to_edit['und'][0]['value'] == 1) {
        if(array_key_exists('und', $node->field_basic_edit)) {
      	  $link = "http://phoneline.quipu-project.com/sites/default/files/" . $node->field_basic_edit['und'][0]['filename'];
    	} else {
      	  $link = 'error';
    	};
      } else {
        $link = "http://phoneline.quipu-project.com/sites/default/files/" . $node->field_audio_file['und'][0]['filename'];
      };
      $nid = $node->nid;
      $title = $node->title;
      $length = field_get_items('node', $node, 'field_length');
      $language = field_get_items('node', $node, 'field_audio_language');
      $to_send = array(
      	       'nid' => $nid,
	       'title' => $title,
	       'length' => $length[0]['value'],
	       'audio_link' => $link,
	       'language' => $language[0]['value'],
	       );
      $callback[] = $to_send;
    };
  };

  return $callback;
}

function load_pending($lang) {

  $callback = array();
  $query = new EntityFieldQuery();

  if($lang == 'es') {
    $query->entityCondition('entity_type', 'node')
//      ->fieldCondition('field_moderated', 'value', 1, '=')
      ->fieldCondition('field_subtitles_es_complete', 'value', 0, '=')
      ->fieldCondition('field_subtitles_sent', 'value', 1, '=')
      ->propertyCondition('type', 'audio_story')
      ->propertyCondition('status', 1)
      ->propertyOrderBy('created', 'DESC');
  } else {
    $query->entityCondition('entity_type', 'node')
//      ->fieldCondition('field_moderated', 'value', 1, '=')
      ->fieldCondition('field_subtitles_en_complete', 'value', 0, '=')
      ->fieldCondition('field_subtitles_sent', 'value', 1, '=')
      ->propertyCondition('status', 1)
      ->propertyCondition('type', 'audio_story')
      ->propertyOrderBy('created', 'DESC');    
  };

  $results = $query->execute();

  if (isset($results['node'])) {
    $nodes = node_load_multiple(array_keys($results['node']));

    foreach ($nodes as $node) {
      $nid = $node->nid;
      $subtitle_id = field_get_items('node', $node, 'field_subtitles_id');
      $to_send = array(
      	       'nid' => $nid,
	       'subtitle_id' => $subtitle_id[0]['value'],
	       );
//      if ($nid == '356') {
      $callback[] = $to_send;
//      };
    };
  };

  return $callback;
}